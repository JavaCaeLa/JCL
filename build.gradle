/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'andre' at '04/02/16 15:36' with Gradle 2.9
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */

 allprojects {
    // Apply the java plugin to add support for Java
    apply plugin: 'java'
    apply plugin: 'eclipse' 
       
    compileJava.options.encoding = 'ISO-8859-1'
    
    // In this section you declare where to find the dependencies of your project
	repositories {
//	    flatDir {
//          dirs 'lib'
//   		}
    	jcenter()
		mavenCentral()
    	mavenLocal()
    	maven {
        	url 'http://4thline.org/m2'
    	}
	}
	
	// In this section you declare the dependencies for your production and test code
	dependencies {
	
    	// The production code uses the SLF4J logging API at compile time
    	//compile files('lib/DexTranslator1.1.jar')
    	compile files('lib/DexTranslator.jar')
    	compile 'io.mraa:mraa:1.3.0'
    	compile 'org.slf4j:slf4j-api:1.7.13'
		compile 'org.javassist:javassist:3.21.0-GA'
 		compile 'io.protostuff:protostuff-core:1.6.0'
 		compile 'io.protostuff:protostuff-api:1.6.0'
 		compile 'io.protostuff:protostuff-collectionschema:1.6.0'
 		compile 'io.protostuff:protostuff-runtime:1.6.0'
		// Cling
		compile group: 'org.fourthline.cling', name: 'cling-core', version:'2.0.1'
    	compile group: 'org.fourthline.cling', name: 'cling-support', version:'2.0.1'    	
    	compile group: 'it.unimi.dsi', name: 'fastutil', version: '7.0.12'
    	
    	// mqtt client
    	compile group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.1.0'
    	//  rasp cam
    	compile group: 'de.sciss', name: 'jrpicam', version: '0.1.0'
    	
    	// Declare the dependency for your favourite test framework you want to use in your tests.
    	// TestNG is also supported by the Gradle Test task. Just change the
    	// testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    	// 'test.useTestNG()' to your build script.
        testCompile 'junit:junit:4.12'
	}
		
//	task copyRuntimeLibs(type: Copy) {
//    into "lib"
//    from configurations.runtime
//  }
  
//  build.dependsOn(copyRuntimeLibs)
}

subprojects {    
	version = '1.0'
//	sourceCompatibility = 1.7
//	targetCompatibility = 1.7
	
	sourceSets{
    	main.java.srcDir rootProject.sourceSets.main.java
//    	resources {
//            srcDirs = ["src/main/resources"]
//            includes = ["**/*.fxml"]
//        }
	}

}

project(':JCL_Host') {
// Apply the java plugin to add support for Java    
//apply plugin: 'application'

//mainClassName = 'implementations.dm_kernel.host.MainHost'

jar {
		doFirst{
	    	from {
	        	(configurations.runtime).collect{
	            	it.isDirectory() ? it : zipTree(it)
	        	}        	
	    	}
	    	
	    	 destinationDir project.file('../JCL_RELEASE/jcl_JARS_pacu/')
	    	 
	    	manifest {
	        	attributes(
	        	"Main-Class": "implementations.dm_kernel.host.MainHost")
	        	from '../manifest.txt'
	    	}
    	}
    	exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
	}
	
//assemble.dependsOn 'propertyJar'

//task propertyJar(type: Jar) {
// archiveName = "JCL_Host-1.0.jar"
// from(sourceSets.main.allSource) {
//    include '**'
// }}

}

project(':JCL_Server') {
// Apply the java plugin to add support for Java    
//apply plugin: 'application'

//mainClassName = 'implementations.dm_kernel.server.MainServer'

jar {
		doFirst{
	    	from {
	        	(configurations.runtime).collect {
	            	it.isDirectory() ? it : zipTree(it)
	        	}
	    	}
	    	 destinationDir project.file('../JCL_RELEASE/jcl_JARS_pacu/')
	    	 
	    	manifest {
	        	attributes("Main-Class": "implementations.dm_kernel.server.MainServer")
	    	}
    	}
    	exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
	}
}

project(':JCL_SuperPeer') {
// Apply the java plugin to add support for Java    
//apply plugin: 'application'

//mainClassName = 'implementations.dm_kernel.super_peer.MainSuperPeer'

jar {
		doFirst{
	    	from {
	        	(configurations.runtime).collect {
	            	it.isDirectory() ? it : zipTree(it)
	        	}
	    	}
	    	 destinationDir project.file('../JCL_RELEASE/jcl_JARS_pacu/')
	    	 
	    	manifest {
	        	attributes("Main-Class": "implementations.dm_kernel.super_peer.MainSuperPeer")
	    	}
    	}
    	exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
	}
}

project(':JCL_User'){

jar {
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
//        configurations.compile.collect {
//            println it.getName()
//     }
    }
        
    
    from sourceSets.main.allSource
//    from('src/main/java/interfaces/kernel') {
//    include '*.*'
// 	}
    
    
    destinationDir project.file('../JCL_RELEASE/jcl_JARS_pacu/')
    
    manifest {
        attributes 'Implementation-Title': 'ndeploy',
            'Implementation-Version': '0.1.0',
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date(),
            'Built-JDK': System.getProperty('java.version')
    	}
    	exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
	}

}

project(':JCL_MQTT') {
// Apply the java plugin to add support for Java    
//apply plugin: 'application'

//mainClassName = 'implementations.dm_kernel.server.MainServer'

jar {
		doFirst{
	    	from {
	        	(configurations.runtime).collect {
	            	it.isDirectory() ? it : zipTree(it)
	        	}
	    	}
	    	 destinationDir project.file('../JCL_RELEASE/jcl_JARS_pacu/')
	    	 
	    	manifest {
	        	attributes("Main-Class": "implementations.dm_kernel.IoTuser.MQTTSubscriber")
	    	}
    	}
    	exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
	}
}

project(':JCL_Boarding') {
// Apply the java plugin to add support for Java    
//apply plugin: 'application'

//mainClassName = 'implementations.dm_kernel.server.MainServer'

jar {
		doFirst{
	    	from {
	        	(configurations.runtime).collect {
	            	it.isDirectory() ? it : zipTree(it)
	        	}
	    	}
	    	 destinationDir project.file('../JCL_RELEASE/jcl_JARS_pacu/')
	    	 
	    	manifest {
	        	attributes("Main-Class": "implementations.dm_kernel.GUI.Frame")
	    	}
    	}
    	exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
	}
}
